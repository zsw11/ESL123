package ${package}.${moduleName}.controller;

import java.util.Arrays;
import java.util.Map;
import java.util.Date;
import java.util.List;

import io.yu.common.annotation.SysLog;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.baomidou.mybatisplus.mapper.EntityWrapper;

import io.yu.modules.basic.entity.FilterEntity;
import ${package}.${moduleName}.entity.${className}Entity;
import ${package}.${moduleName}.service.${className}Service;
import ${package}.sys.controller.AbstractController;
import ${mainPath}.common.utils.PageUtils;
import ${mainPath}.common.utils.RD;
import ${mainPath}.common.validator.ValidatorUtils;


/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@RestController
@RequestMapping("/${version}/${moduleName}/${pathName}")
public class ${className}Controller extends AbstractController{
    @Autowired
    private ${className}Service ${classname}Service;

    /**
     * 列表
     */
    @RequestMapping("/list")
    @RequiresPermissions("${moduleName}:${pathName}:list")
    public ResponseEntity<Object> list(@RequestParam Map<String, Object> params){
        PageUtils page = ${classname}Service.queryPage(params);

        return RD.listReturn(page.getData(), page.getTotalCount());
    }
    
    /**
	 * 信息
	 */
	@RequestMapping("/detail")
	@RequiresPermissions("${moduleName}:${pathName}:info")
	public ResponseEntity<Object> detail(@RequestParam Long id) {
		return RD.ok(info(id));
	}


    /**
     * 信息
     */
    @RequestMapping("/info/{${pk.attrname}}")
    @RequiresPermissions("${moduleName}:${pathName}:info")
    public ResponseEntity<Object> info(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname}){
		${className}Entity ${classname} = ${classname}Service.selectById(${pk.attrname});

        return RD.ok(${classname});
    }

    /**
     * 保存
     */
    @SysLog("保存${comments}")
    @RequestMapping("/create")
    @RequiresPermissions("${moduleName}:${pathName}:create")
    public ResponseEntity<Object> save(@RequestBody ${className}Entity ${classname}){
		${classname}.setCreateUserId(getUserId());
		${classname}.setUpdateTime(new Date());
		${classname}.setCreateTime(new Date());
		ValidatorUtils.validateEntity(${classname});
		${classname}Service.save(${classname});

        return RD.ok(RD.build());
    }

    /**
     * 修改
     */
    @SysLog("修改${comments}")
    @RequestMapping("/update")
    @RequiresPermissions("${moduleName}:${pathName}:update")
    public ResponseEntity<Object> update(@RequestBody ${className}Entity ${classname}){
		${classname}.setUpdateUserId(getUserId());
		${classname}.setUpdateTime(new Date());
		ValidatorUtils.validateEntity(${classname});
		${classname}Service.update(${classname});

        return RD.ok(RD.build());
    }

    /**
     * 删除
     */
    @SysLog("删除${comments}")
    @RequestMapping("/delete")
    @RequiresPermissions("${moduleName}:${pathName}:delete")
    public ResponseEntity<Object> delete(@RequestBody ${pk.attrType}[] ${pk.attrname}s){
		${classname}Service.deleteBatch(${pk.attrname}s);

        return RD.NO_CONTENT(RD.build());
    }

}
