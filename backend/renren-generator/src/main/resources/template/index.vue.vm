<template>
  <div class="gen-list-page">
    <el-card class="filter-card with-title">
      <div slot="header" class="clearfix">
        <div class="card-title">条件搜索</div>
      </div>
      <el-form :inline="true" :model="listQuery" @keyup.enter.native="getDataList()">
        <div class="buttons with-complex">
          <complex-filter
            :config="complexFilterConfig"
            @confirm="doComplexSearch"
            :type="dataButton==='complex' ? 'primary' : ''"
            class="complex-button">高级搜索
          </complex-filter>
          <el-button @click="clearQuery()">清   空</el-button>
          <el-button @click="getDataList()" :type="dataButton==='list' ? 'primary' : ''" >搜   索</el-button>
        </div>
      </el-form>
    </el-card>
    <el-card class="with-title">
      <div slot="header" class="clearfix">
        <div class="card-title">${comments}</div>
        <div class="buttons">
          <el-button v-if="isAuth('${moduleName}:${pathName}:save')" type="primary" @click="addOrUpdateHandle()">新增</el-button>
          <display-attributes
            :config="displayConfig"
            type="primary"
            plain>显示字段
          </display-attributes>
          <export-data
            :config="exportConfig"
            type="primary"
            plain>导   出
          </export-data>
          <import-data
            v-if="isAuth('${moduleName}:${pathName}:save')"
            :config="importConfig">
          </import-data>
          <el-button v-if="isAuth('${moduleName}:${pathName}:delete')" type="danger" @click="deleteHandle()" :disabled="dataListSelections.length <= 0">批量删除</el-button>
        </div>
      </div>
      <el-table
        :data="dataList"
        v-loading="dataListLoading"
        @selection-change="selectionChangeHandle"
        style="width: 100%;">
        <el-table-column
          type="selection"
          header-align="left"
          align="left"
          width="50">
        </el-table-column>
#foreach($column in $columns)
        <el-table-column
          prop="${column.attrname}"
          header-align="left"
          align="left"
          label="${column.comments}">
        </el-table-column>
#end
        <el-table-column
          fixed="right"
          header-align="left"
          align="left"
          width="150"
          label="操作">
          <template slot-scope="scope">
            <el-button type="text" size="small" @click="addOrUpdateHandle(scope.row.${pk.attrname})">修改</el-button>
            <el-button type="text" size="small" @click="deleteHandle(scope.row.${pk.attrname})">删除</el-button>
          </template>
        </el-table-column>
      </el-table>
      <el-pagination
        @size-change="sizeChangeHandle"
        @current-change="currentChangeHandle"
        :current-page="pageIndex"
        :page-sizes="[10, 20, 50, 100]"
        :page-size="pageSize"
        :total="totalPage"
        layout="total, sizes, prev, pager, next, jumper">
      </el-pagination>
    </el-card>
  </div>
</template>

<script>
import {
  ${classname}List, ${classname}AdvancedSearch,
  ${classname}Export, ${classname}Import, ${classname}Delete
} from '@/api/${pathName}'
import DisplayAttributes from '@/components/display-attributes'
import ComplexFilter from '@/components/complex-filter'
import ExportData from '@/components/export-data'
import ImportData from '@/components/import-data'
import DictSelect from '@/components/dict-select'
import AreaSelect from '@/components/area-select'
import AreaDisplay from '@/components/area-display'

export default {
  components: {
    DisplayAttributes,
    ComplexFilter,
    ExportData,
    ImportData,
    DictSelect,
    AreaSelect,
    AreaDisplay
  },
  data () {
    return {
      dataButton: 'list',
      listQuery: {
      },
      attributes: [
        {
          code: '${classname}',
          name: '${comments}',
          children: [
#foreach($column in $columns)
            { code: '${column.attrname}', name: '${column.comments}', type: 'string', isImport: true },
#end
          ]
        }
      ],
      complexFilters: [],
      exportAttributes: [ #foreach($column in $columns)'${classname}.${column.attrname}', #end ],
      displayAttributes: [ #foreach($column in $columns)'${classname}.${column.attrname}', #end ],
      dataList: [],
      pageIndex: 1,
      pageSize: 10,
      totalPage: 0,
      dataListLoading: false,
      dataListSelections: []
    }
  },
  computed: {
    displayConfig () {
      return {
        attributes: this.attributes,
        displayAttributes: this.displayAttributes
      }
    },
    complexFilterConfig () {
      return {
        attributes: this.attributes,
        complexFilters: this.complexFilters
      }
    },
    importConfig () {
      return {
        attributes: this.attributes.slice(0, 1),
        importApi: ${classname}Import
      }
    },
    exportConfig () {
      return {
        attributes: this.attributes,
        exportApi: ${classname}Export,
        filterType: this.dataButton,
        filters: this.listQuery,
        complexFilters: this.complexFilters,
        exportAttributes: this.exportAttributes
      }
    }
  },
  activated () {
    this.getDataList()
  },
  methods: {
    // 获取数据列表
    getDataList () {
      this.dataButton = 'list'
      this.dataListLoading = true
      ${classname}List(Object.assign(
        {
          page: this.pageIndex,
          limit: this.pageSize
        },
        this.listQuery
      )).then(({data}) => {
        if (data && data.code === 0) {
          this.dataList = data.page.list
          this.totalPage = data.page.totalCount
        } else {
          this.dataList = []
          this.totalPage = 0
        }
        this.dataListLoading = false
      })
    },
    clearQuery () {
      this.listQuery = Object.assign(this.listQuery, {
      })
    },
    doComplexSearch () {
      this.dataButton = 'complex'
      this.dataListLoading = true
      ${classname}AdvancedSearch({
        filters: this.complexFilters,
        page: this.pageIndex,
        limit: this.pageSize
      }).then(({data}) => {
        if (data && data.code === 0) {
          this.dataList = data.page.list
          this.totalPage = data.page.totalCount
        } else {
          this.dataList = []
          this.totalPage = 0
        }
        this.dataListLoading = false
      })
    },
    // 每页数
    sizeChangeHandle (val) {
      this.pageSize = val
      this.pageIndex = 1
      this.getDataList()
    },
    // 当前页
    currentChangeHandle (val) {
      this.pageIndex = val
      this.getDataList()
    },
    // 多选
    selectionChangeHandle (val) {
      this.dataListSelections = val
    },
    // 新增 / 修改
    addOrUpdateHandle (id) {
      #[[this.$router.push({ path: id ?]]# 'edit-${pathName}/' + id : 'add-${pathName}' })
    },
    // 删除
    deleteHandle (id) {
      var ids = id ? [id] : this.dataListSelections.map(item => {
        return item.${pk.attrname}
      })
      #[[this.$confirm(`确定对[id=${ids.join(',')}]进行[${id ? '删除' : '批量删除'}]操作?`, '提示', {]]#
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning'
      }).then(() => {
        ${classname}Delete(ids).then(({data}) => {
          if (data && data.code === 0) {
            #[[this.$message({]]#
              message: '操作成功',
              type: 'success',
              duration: 1500,
              onClose: () => {
                this.getDataList()
              }
            })
          } else {
            #[[this.$message.error(data.msg)]]#
          }
        })
      })
    }
  }
}
</script>
