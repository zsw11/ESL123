
<template>
  <el-card class="with-title">
    <div slot="header" class="clearfix">
      <div class="card-title">{{!dataForm.id ? '新增' : '修改'}}{{modelCnName}}</div>
      <div class="buttons">
        <el-button @click="cancleFormSubmit">取   消</el-button>
      </div>
    </div>
    <el-form :rules="dataRules" ref="dataForm" :model="dataForm" label-position="right" :size="'mini'" label-width="100px" style='width: 95%'>
{{#forOf attrs}}{{#compare ../selectedAttrs 'includes' k}}          <el-form-item :label="'{{attrName this}}'" prop="{{k}}">
{{#switch v.UIType}}{{#case 'inputNumber'}}            <el-input-number v-model="dataForm.{{k}}" {{#if v.type.scal}}:precision="{{v.type.scale}}"{{/if}}></el-input-number>
{{/case}}{{#case 'switch'}}            <el-switch v-model="dataForm.{{k}}"></el-switch>
{{/case}}{{#case 'radio'}}            <el-radio v-model="dataForm.{{k}}" label="值1"></el-radio>
{{/case}}{{#case 'slider'}}            <el-slider v-model="dataForm.{{k}}" label="值1"></el-slider>
{{/case}}{{#case 'remoteDict'}}            <dict-select dictCode="{{k}}" v-model="dataForm.{{k}}"></dict-select>
{{/case}}{{#case 'remoteSelect'}}            <keyword-search v-model="dataForm.{{k}}" :searchApi="list{{upperFirstRmId k}}" labelColumn="{{k}}" valueColumn="{{k}}" :allowEmpty="true"></keyword-search>
{{/case}}{{#case 'select'}}            <el-select v-model="dataForm.{{k}}">
          <el-option v-for="item in {{#compare v.refsTable '!==' undefined}}dataForm.{{refsTable this}}sList{{/compare}}{{#compare v.refsTable '===' undefined}}[]{{/compare}}" :key="item.id" :label="item.{{refsProperty this}}" :value="item.id"></el-option>
        </el-select>
{{/case}}{{#case 'datePicker'}}            <el-date-picker v-model="dataForm.{{k}}" type="date" value-format="yyyy-MM-dd">
        </el-date-picker>
{{/case}}{{#case 'timePicker'}}            <el-time-select v-model="dataForm.{{k}}" type="time" :picker-options="{
            start: '08:30',
            step: '00:15',
            end: '18:30'
          }">
        </el-time-select>
{{/case}}{{#case 'datetimePicker'}}            <el-date-picker v-model="dataForm.{{k}}" type="datetime" value-format="yyyy-MM-dd HH:mm:ss">
        </el-date-picker>
{{/case}}{{#default}}            <el-input v-model="dataForm.{{k}}"></el-input>
{{/default}}{{/switch}}          </el-form-item>

{{/compare}}{{/forOf}}
    </el-form>

    <span class="dialog-footer">
      <el-button type="primary" @click="dataFormSubmit()">保   存</el-button>
      <el-button @click="cancleFormSubmit">取   消</el-button>
    </span>
  </el-card>
</template>

<script>
import { pick } from 'lodash'
import { fetch{{upperFirst modelName}}, create{{upperFirst modelName}}, update{{upperFirst modelName}} } from '@/api/{{modelName}}'
{{#forOf attrs}}
{{#compare v.UIType '===' 'remoteSelect'}}
import { list{{upperFirstRmId k}} } from '@/api/{{k}}' // 如果没有对应api请自行修改
{{/compare}}
{{#compare v.UIType '===' 'select'}}
{{#compare v.refsTable '!==' undefined}}
import { list{{upperFirst v.refsTable}} } from '@/api/{{refsTable this}}'
{{/compare}}
{{/compare}}
{{/forOf}}
export default {
  name: 'edit{{upperFirst modelName}}',
  data () {
    return {
      inited: false,
      dataForm: {
        id: 0,{{#forOf attrs}}{{#compare ../selectedAttrs 'includes' k}}        
        {{k}}: null,{{/compare}}{{#compare v.UIType '===' 'select'}}{{#compare v.refsTable '!==' undefined}}        
        {{refsTable this}}sList: null,{{/compare}}{{/compare}}{{/forOf}}
      },
      dataRules: {
{{#forOf attrs}}{{#compare ../selectedAttrs 'includes' k}}{{{updateValidate this}}}
{{/compare}}{{/forOf}}      },
{{#forOf attrs}}
{{#compare v.UIType '===' 'remoteSelect'}}
      list{{upperFirstRmId k}},
{{/compare}}
{{/forOf}}
    }
  },
  beforeRouteEnter (to, from, next) {
    next(vm => {
      vm.fromFullPath = from.fullPath
    })
  },
  created () {
    this.init()
  },
  activated () {
    if (this.dataForm.id && parseInt(this.$route.params.id) !== this.dataForm.id) {
      this.init()
    }
  },
  watch: {
    dataForm: {
      handler: function (val) {
        if (this.inited) {
          this.$store.dispatch('common/updateTabAttrs', {
            name: this.$route.name,
            changed: true
          })
        }
      },
      deep: true
    }
  },
  methods: {
    init () {
      this.$store.dispatch('common/updateTabAttrs', {
        name: this.$route.name,
        changed: false
      })
      this.inited = false
      this.dataForm.id = parseInt(this.$route.params.id) || 0
      {{#forOf attrs}}{{#compare v.UIType '===' 'select'}}{{#compare v.refsTable '!==' undefined}}list{{upperFirst v.refsTable}}().then(({data}) => {
        this.dataForm.{{refsTable this}}sList = data
      })
      {{/compare}}
      {{/compare}}
      {{/forOf}}
      if (this.dataForm.id) {
        fetch{{upperFirst modelName}}(this.dataForm.id).then(({data}) => {
          Object.assign(
            this.dataForm,
            pick(data, [ {{#forOf attrs}}{{#compare ../selectedAttrs 'includes' k}}'{{k}}', {{/compare}}{{/forOf}}])
          )
        }).finally(() => {
          this.inited = true
        })
      } else {
        this.inited = true
      }
    },
    // 取消信息
    cancleFormSubmit () {
      this.$store.dispatch('common/closeActiveTab')
      this.$router.push({ name: '{{module}}-{{toLower modelName}}' })
      this.$destroy()
    },
    // 表单提交
    dataFormSubmit () {
      this.$refs['dataForm'].validate((valid) => {
        if (valid) {
          (this.dataForm.id
            ? update{{upperFirst modelName}}(this.dataForm.id, this.dataForm)
            : create{{upperFirst modelName}}(this.dataForm)
          ).then(({data}) => {
            this.$message({
              message: '操作成功',
              type: 'success',
              duration: 1500,
              onClose: this.cancleFormSubmit
            })
          })
        }
      })
    },
  }
}
</script>
